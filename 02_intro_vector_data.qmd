---
jupyter: python3
---

# Introduction to Vector Data

Now we'll look at the second main type of data - vector data. You will be able to:

- Describe the strengths and weaknesses of storing data in vector format.
- Describe the different types of vectors and identify types of data that would be stored in each.
- Use GeoPandas to read and work with a vector data file in Shapefile format.

## Readings and Resources

- GCwP - [Ch 1: Geographic Data in Python - Section 1.2](https://py.geocompx.org/01-spatial-data#sec-vector-data)
- GCwR - [Ch 2: Geographic Data in R - Section 2.2](https://r.geocompx.org/spatial-class#vector-data)

## About Vector Data

Vector data structures represent specific features on the Earth's surface, and
assign attributes to those features. Vectors are composed of discrete geometric
locations (x, y values) known as vertices that define the shape of the spatial
object. The organization of the vertices determines the type of vector that we
are working with: point, line or polygon.

![Types of vector objects (Image Source: National Ecological Observatory Network (NEON))](images/E02/pnt_line_poly.png){alt="vector data types"}

* **Points:** Each point is defined by a single x, y coordinate. There can be
many points in a vector point file. Examples of point data include: sampling
locations, the location of individual trees, or the location of survey plots.

* **Lines:** Lines are composed of many (at least 2) points that are connected.
For instance, a road or a stream may be represented by a line. This line is
composed of a series of segments, each "bend" in the road or stream represents a
vertex that has a defined x, y location.

* **Polygons:** A polygon consists of 3 or more vertices that are connected and
closed. The outlines of survey plot boundaries, lakes, oceans, and states or
countries are often represented by polygons.

::: {.callout-note}
## Data Tip

Sometimes, boundary layers such as states and countries, are stored as lines
rather than polygons. However, these boundaries, when represented as a line,
will not create a closed object with a defined area that can be filled.
:::

::: {.callout-tip}
### Challenge - Identify Vector Types

The plot below includes examples of two of the three types of vector
objects. Use the definitions above to identify which features
are represented by which vector type.

![Vector Type Examples](images/E02/vector_types_examples.png){alt="vector type examples"}


:::

::: {.callout-tip collapse="true"}
### Solution

State boundaries are polygons. The Fisher Tower location is
a point. There are no line features shown.
:::



Vector data has some important advantages:

* The geometry itself contains information about what the dataset creator thought was important.
* The geometry structures hold information in themselves - why choose point over polygon, for instance?
* Each geometry feature can carry multiple attributes instead of just one, e.g. a database of cities can have attributes for name, country, population, etc.
* Data storage can be very efficient compared to rasters. For example, a polygon of a large area can be represented with a small number of vertices as compared to all the raster grid elements making up the polygon.

The downsides of vector data include:

* Potential loss of detail compared to raster.
* Potential bias in datasets - what didn't get recorded?
* Calculations involving multiple vector layers need to do math on the
  geometry as well as the attributes, so can be slow compared to raster math.

Vector datasets are in use in many industries besides geospatial fields. For
instance, computer graphics are largely vector-based, although the data
structures in use tend to join points using arcs and complex curves rather than
straight lines. Computer-aided design (CAD) is also vector-based. The
difference is that geospatial datasets are accompanied by information tying
their features to real-world locations.

## Vector Data Format for this Module

Like raster data, vector data can also come in many different formats. For this
module, we will start with the Shapefile format. This is an extremely common (and old) format
developed by [ESRI](https://www.esri.com/en-us/home) the company behind the most popular commercial GIS package, ArcGIS.

A Shapefile format consists of multiple
files in the same directory, of which `.shp`, `.shx`, and `.dbf` files are mandatory. Other non-mandatory but very important files are `.prj` and `shp.xml` files.

- The `.shp` file stores the feature geometry itself
- `.shx` is a positional index of the feature geometry to allow quickly searching forwards and backwards through the geographic coordinates of each vertex in the vector
- `.dbf` contains the tabular attributes for each shape. Based on the really old (1983, pre-Windows), dBASE, file format.
- `.prj` file indicates the coordinate reference system (CRS)
- `.shp.xml` contains the Shapefile metadata.

Together, the Shapefile includes the following information:

* **Extent** - the spatial extent of the shapefile (i.e. geographic area that
the shapefile covers). The spatial extent for a shapefile represents the
combined extent for all spatial objects in the shapefile.
* **Object type** - whether the shapefile includes points, lines, or polygons.
* **Coordinate reference system (CRS)**
* **Other attributes** - for example, a line shapefile that contains the
locations of streams, might contain the name of each stream.

Because the structure of points, lines, and polygons are different, each
individual shapefile can only contain one vector type (all points, all lines
or all polygons). You will not find a mixture of point, line and polygon
objects in a single shapefile.

Later in this module we'll look at GeoJSON files, another format for storing vector data.

:::callout
## More Resources on Shapefiles

More about shapefiles can be found on
[Wikipedia.](https://en.wikipedia.org/wiki/Shapefile) Shapefiles are often publicly
available from government services, such as [this page from the US Census Bureau][us-cb].
:::

## Integrated raster and vector data formats

Very few formats can contain both raster and vector data - in fact, most are
even more restrictive than that. Vector datasets are usually locked to one
geometry type, e.g. points only. Raster datasets can usually only encode one
data type, for example you can't have a multiband GeoTIFF where one layer is
integer data and another is floating-point. There are sound reasons for this -
format standards are easier to define and maintain, and so is metadata. The
effects of particular data manipulations are more predictable if you are
confident that all of your input data has the same characteristics.

There are integrated file formats that do allow you to mix separate vector and raster files
within the same container file. These include [GeoPackage](https://www.geopackage.org/) (which is a SQLite database) and [Geodatabase](https://pro.arcgis.com/en/pro-app/latest/help/data/geodatabases/overview/what-is-a-geodatabase-.htm) formats.

:::callout
- Vector data structures represent specific features on the Earth's surface along with attributes of those features.
- Vector objects are either points, lines, or polygons.
:::

## [GeoPandas](https://geopandas.org/en/stable/) - add geospatial functionality to pandas

The basic idea is to combine the capabilities of pandas with the **shapely** library to allow you to work with geospatial data in a **pandas**-like way.

> GeoPandas is an open source project to make working with geospatial data in python easier. GeoPandas extends the datatypes used by pandas to allow spatial operations on geometric types. Geometric operations are performed by [shapely](https://shapely.readthedocs.io/en/stable/index.html). GeoPandas further depends on [fiona](https://fiona.readthedocs.io/en/stable/) for file access and matplotlib for plotting.

![](images/E07/pandas_geopandas_relation.png){alt="Pandas and Geopandas"}

GeoPandas extends the popular **pandas** library for data analysis to geospatial applications. The main **pandas** objects (the `Series` and the `DataFrame`) are expanded to **geopandas** objects (`GeoSeries` and `GeoDataFrame`). This extension is implemented by including geometric types, represented in Python using the **shapely** library, and by providing dedicated methods for spatial operations (union, intersection, etc.). The relationship between `Series`, `DataFrame`, `GeoSeries` and `GeoDataFrame` can be briefly explained as follow:

 - A `Series` is a one-dimensional array with axis, holding any data type (integers, strings, floating-point numbers, Python objects, etc.)
 - A `DataFrame` is a two-dimensional labeled data structure with columns of potentially different types1.
 - A `GeoSeries` is a `Series` object designed to store shapely geometry objects.
 - A `GeoDataFrame` is an extended `pandas.DataFrame`, which has a column with geometry objects, and this column is a `GeoSeries`.

Let's use **geopandas** to read a shapefile. The US government provides Cartographic Boundary Files in both geodatabase and shapefile formats. They are available at different levels of resolution and also by geographic region.

> The cartographic boundary files are simplified representations of selected geographic areas from the Census Bureauâ€™s Master Address File/Topologically Integrated Geographic Encoding and Referencing (MAF/TIGER) System. These boundary files are specifically designed for small scale thematic mapping. As of 2019, cartographic boundary files are available in shapefile, geodatabase, and Keyhole Markup Language (KML) format. For more details about these files, including their appropriate usage, please see our [Cartographic Boundary File Description](https://www.census.gov/programs-surveys/geography/technical-documentation/naming-convention/cartographic-boundary-file.html) page.


From [this link](https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html), I downloaded a zipped shapefile (**cb_2022_26_place_500k.zip**) for the Places in the state of Michigan. As we'll see, these are things like city and township boundaries. After uncompressing it, the resulting folder looks like this:

```
â”œâ”€â”€ cb_2022_26_place_500k
â”‚Â Â  â”œâ”€â”€ cb_2022_26_place_500k.cpg
â”‚Â Â  â”œâ”€â”€ cb_2022_26_place_500k.dbf
â”‚Â Â  â”œâ”€â”€ cb_2022_26_place_500k.prj
â”‚Â Â  â”œâ”€â”€ cb_2022_26_place_500k.shp
â”‚Â Â  â”œâ”€â”€ cb_2022_26_place_500k.shp.ea.iso.xml
â”‚Â Â  â”œâ”€â”€ cb_2022_26_place_500k.shp.iso.xml
â”‚Â Â  â””â”€â”€ cb_2022_26_place_500k.shx
â””â”€â”€ cb_2022_26_place_500k.zip

1 directory, 8 files
```

Now let's open the shapefile with **geopandas**. 


```{python}
import geopandas as gpd
from pathlib import Path
```

To read a shapefile, we can use the `read_file()` function and pass in the name of the file with the `.shp` extension.

```{python}
mi_places_file = Path('data', 'cb_2022_26_place_500k', 'cb_2022_26_place_500k.shp')
mi_places_gdf = gpd.read_file(mi_places_file)

mi_places_gdf.info()
```

The resulting data structure is called a `GeoDataFrame`. In addition to standard `DataFrame` fields, a `GeoDataFrame` has one or more `geometry` fields. Only one `geometry` field is considered active at any one time.
As you might guess, this field will allow us to do spatial queries with pandas-like commands as well as plot the data.

Let's see what's in the `geometry` field.

```{python}
mi_places_gdf[['NAME', 'geometry']].head(15)
```

As each row is a "place" in Michigan, it's not surprising to find `POLYGON` objects in the `geometry` field. You'll explore this `GeoDataFrame` further in the land use analysis notebook below.


## Case Study: Land use analysis on the OU campus

Throughout this module, we will use this case study to allow you to get some
hands on practice with the topics covered. For this this module, you'll
be working through a Jupyter notebook that introduces the very basics of working
with vector data in shapefile format. 

### Activities

Start by downloading the following file and extract it in a location of your choice.

Launch Jupyter lab and open the **ou_land_use_02_vectorintro.ipynb** file. Work your
way through out. 

- Download: [ou_land_use_02_vectorintro.zip]()

There is a single screencast that goes along with this section:

- Screencast: [Intro to vector data and land use on the OU campus]()

[us-cb]: https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html

