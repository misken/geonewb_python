---
title: "Dev notes"
---

## Generating site


## Conda envs

This wierd regex error seems to be at root of the problem in getting reticulate to 
use the specified conda env. https://github.com/rstudio/reticulate/issues/1535

```{r}
# py_discover_config()
```

## Learning from geocompy

https://py.geocompx.org/preface

The book is written with qmd files. 
There is a `convert.sh` file that converts the chapters in qmd format to ipynb
and .py format using quarto.

### Style conventions

Package names are bold.
Folder and filenames are like code.

### Building the book

```
conda run -n quarto_geonewb quarto preview
```

#### Packages needed to build the book

numpy
pandas
matplotlib
jupyter
jupyterlab
ipykernel

rioxarray
geopandas
shapely
cartopy
pystac
planetary_computer

osmnx
rasterstats
contextily



## Packages needed by a user of the notebooks

Figure out all main packages needed and creation environment.yml file. Create
the conda virtual env and test as I write module.

numpy
pandas
matplotlib
ipykernel

rioxarray
geopandas
shapely
cartopy
pystac
planetary_computer

osmnx
rasterstats
contextily

## Outline

* Introduction to Raster Data
  - what is it and what is it used to represent?
  - main Python libraries for working with raster data
  - basic plotting of raster data
  - Case Study: reading, exploring, plotting a raster file representing land use on the OU campus

* Introduction to Vector Data
  - what is it and what is it used to represent?
  - main Python libraries for working with vector data
  - basic plotting of vector data
  - Case Study: reading, exploring, plotting a vector file representing various features on the OU campus such as buildings and rivers

* Coordinate Reference Systems
  - this is a big, important, and complex topic
  - how do we represent something like location on our planet, that is inherently 3D, on a 2D surface such as a computer screen or a piece of paper? We use something called a projected coordinate reference system (CRS).
  - we will learn enough to be able to work effectively with data from different coordinate reference systems.
  - Case Study: check CRS of raster and vector data, reproject data from one CRS to another

* The GIS Landscape
  - it's a big landscape
  - software options

* Accessing Satellite Imagery
  - use MS Planetary Computer to find and download satellite imagery
  - Case Study: Download and view Sentinel-2 images of OU campus

* Working with Raster Data in Python
  - using rioxarray and xarray packages to read, explore, and visualize raster data
  - introduction to GDAL for converting between file formats (img -> tif), MORE STUFF
  - common raster operations such as cropping, dealing with no data values, reprojecting and resampling
  - raster computations such as NVDI
  - hillshade
  - Case Study: analyze land use patterns over time on OU campus

* Working with Vector Data in Python
  - more use of GeoPandas for vector data manipulation
  - Case Study: overlaying rivers on OU campus raster

* Making Maps
  - using Cartopy to make a map combining vector and raster data

## Chapters

### Introduction to Raster Data

### Introduction to Vector Data

### Introduction to CRS

### GIS Landscape

### Introduction to working with satellite imagery

## Case Study: OU land use

## Notes

What if we did an analysis of land use on the OU campus?

Could get both RGB imagery as well as computing NDVI. The Carpentries course,
https://carpentries-incubator.github.io/geospatial-python/09-raster-calculations.html, does
NDVI computations and then creates a classification scheme to create a discrete raster from
the continuous NDVI raster. All quite relevant. Sections before this one do typical 
raster and vector operations such as cropping, reprojecting and matching different layers.



Could look at how things have changed over time.

Would require combo of raster and vector data.

- single and multi-band rasters
- missing data in rasters
- cropping rasters

Where to get the vector data? What kind of vector data exists for the OU campus?

How to do the land use analysis?
